
main.bin:     С„РѕСЂРјР°С‚ С„Р°Р№Р»Р° elf32-avr

Р Р°Р·РґРµР»С‹:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000650  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000007a4  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cdb  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000272a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING

Р”РёР·Р°СЃСЃРµРјР±Р»РёСЂРѕРІР°РЅРёРµ СЂР°Р·РґРµР»Р° .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  78:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_prnt>:

// Функция работы со светодиодом по указателям
// через макрос удаления & из имени порта при вызове
// иначе  вызов будет prnt(&PORTB,..)
#define prnt(xport,xname,delms) _prnt(&xport,xname,delms)
void _prnt(volatile uint8_t *xport, uint8_t xname, uint16_t delms) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	a1 97       	sbiw	r28, 0x21	; 33
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
  94:	9e 8f       	std	Y+30, r25	; 0x1e
  96:	8d 8f       	std	Y+29, r24	; 0x1d
  98:	6f 8f       	std	Y+31, r22	; 0x1f
  9a:	59 a3       	std	Y+33, r21	; 0x21
  9c:	48 a3       	std	Y+32, r20	; 0x20
	*xport |= (1<<xname);
  9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
  a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
  a2:	fc 01       	movw	r30, r24
  a4:	80 81       	ld	r24, Z
  a6:	48 2f       	mov	r20, r24
  a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <_prnt+0x38>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	2a 95       	dec	r18
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <_prnt+0x34>
  bc:	84 2b       	or	r24, r20
  be:	28 2f       	mov	r18, r24
  c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
  c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	_delay_ms(delms);
  c8:	88 a1       	ldd	r24, Y+32	; 0x20
  ca:	99 a1       	ldd	r25, Y+33	; 0x21
  cc:	cc 01       	movw	r24, r24
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	bc 01       	movw	r22, r24
  d4:	cd 01       	movw	r24, r26
  d6:	0e 94 02 02 	call	0x404	; 0x404 <__floatunsisf>
  da:	dc 01       	movw	r26, r24
  dc:	cb 01       	movw	r24, r22
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	ab 83       	std	Y+3, r26	; 0x03
  e4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	4a e7       	ldi	r20, 0x7A	; 122
  ec:	55 e4       	ldi	r21, 0x45	; 69
  ee:	69 81       	ldd	r22, Y+1	; 0x01
  f0:	7a 81       	ldd	r23, Y+2	; 0x02
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	0e 94 91 02 	call	0x522	; 0x522 <__mulsf3>
  fa:	dc 01       	movw	r26, r24
  fc:	cb 01       	movw	r24, r22
  fe:	8b 8b       	std	Y+19, r24	; 0x13
 100:	9c 8b       	std	Y+20, r25	; 0x14
 102:	ad 8b       	std	Y+21, r26	; 0x15
 104:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e8       	ldi	r20, 0x80	; 128
 10c:	5f e3       	ldi	r21, 0x3F	; 63
 10e:	6b 89       	ldd	r22, Y+19	; 0x13
 110:	7c 89       	ldd	r23, Y+20	; 0x14
 112:	8d 89       	ldd	r24, Y+21	; 0x15
 114:	9e 89       	ldd	r25, Y+22	; 0x16
 116:	0e 94 ce 01 	call	0x39c	; 0x39c <__cmpsf2>
 11a:	88 23       	and	r24, r24
 11c:	2c f4       	brge	.+10     	; 0x128 <_prnt+0xa8>
		__ticks = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	98 8f       	std	Y+24, r25	; 0x18
 124:	8f 8b       	std	Y+23, r24	; 0x17
 126:	3f c0       	rjmp	.+126    	; 0x1a6 <_prnt+0x126>
	else if (__tmp > 65535)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	3f ef       	ldi	r19, 0xFF	; 255
 12c:	4f e7       	ldi	r20, 0x7F	; 127
 12e:	57 e4       	ldi	r21, 0x47	; 71
 130:	6b 89       	ldd	r22, Y+19	; 0x13
 132:	7c 89       	ldd	r23, Y+20	; 0x14
 134:	8d 89       	ldd	r24, Y+21	; 0x15
 136:	9e 89       	ldd	r25, Y+22	; 0x16
 138:	0e 94 8c 02 	call	0x518	; 0x518 <__gesf2>
 13c:	18 16       	cp	r1, r24
 13e:	4c f5       	brge	.+82     	; 0x192 <_prnt+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e2       	ldi	r20, 0x20	; 32
 146:	51 e4       	ldi	r21, 0x41	; 65
 148:	69 81       	ldd	r22, Y+1	; 0x01
 14a:	7a 81       	ldd	r23, Y+2	; 0x02
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	0e 94 91 02 	call	0x522	; 0x522 <__mulsf3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 160:	dc 01       	movw	r26, r24
 162:	cb 01       	movw	r24, r22
 164:	98 8f       	std	Y+24, r25	; 0x18
 166:	8f 8b       	std	Y+23, r24	; 0x17
 168:	0f c0       	rjmp	.+30     	; 0x188 <_prnt+0x108>
 16a:	80 e9       	ldi	r24, 0x90	; 144
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	9a 8f       	std	Y+26, r25	; 0x1a
 170:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 172:	89 8d       	ldd	r24, Y+25	; 0x19
 174:	9a 8d       	ldd	r25, Y+26	; 0x1a
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <_prnt+0xf6>
 17a:	9a 8f       	std	Y+26, r25	; 0x1a
 17c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	8f 89       	ldd	r24, Y+23	; 0x17
 180:	98 8d       	ldd	r25, Y+24	; 0x18
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	98 8f       	std	Y+24, r25	; 0x18
 186:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	8f 89       	ldd	r24, Y+23	; 0x17
 18a:	98 8d       	ldd	r25, Y+24	; 0x18
 18c:	89 2b       	or	r24, r25
 18e:	69 f7       	brne	.-38     	; 0x16a <_prnt+0xea>
 190:	14 c0       	rjmp	.+40     	; 0x1ba <_prnt+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 192:	6b 89       	ldd	r22, Y+19	; 0x13
 194:	7c 89       	ldd	r23, Y+20	; 0x14
 196:	8d 89       	ldd	r24, Y+21	; 0x15
 198:	9e 89       	ldd	r25, Y+22	; 0x16
 19a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 19e:	dc 01       	movw	r26, r24
 1a0:	cb 01       	movw	r24, r22
 1a2:	98 8f       	std	Y+24, r25	; 0x18
 1a4:	8f 8b       	std	Y+23, r24	; 0x17
 1a6:	8f 89       	ldd	r24, Y+23	; 0x17
 1a8:	98 8d       	ldd	r25, Y+24	; 0x18
 1aa:	9c 8f       	std	Y+28, r25	; 0x1c
 1ac:	8b 8f       	std	Y+27, r24	; 0x1b
 1ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <_prnt+0x132>
 1b6:	9c 8f       	std	Y+28, r25	; 0x1c
 1b8:	8b 8f       	std	Y+27, r24	; 0x1b
	*xport &=~(1<<xname);
 1ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_prnt+0x154>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <_prnt+0x150>
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	28 2f       	mov	r18, r24
 1de:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
	_delay_ms(delms);
 1e6:	88 a1       	ldd	r24, Y+32	; 0x20
 1e8:	99 a1       	ldd	r25, Y+33	; 0x21
 1ea:	cc 01       	movw	r24, r24
 1ec:	a0 e0       	ldi	r26, 0x00	; 0
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	bc 01       	movw	r22, r24
 1f2:	cd 01       	movw	r24, r26
 1f4:	0e 94 02 02 	call	0x404	; 0x404 <__floatunsisf>
 1f8:	dc 01       	movw	r26, r24
 1fa:	cb 01       	movw	r24, r22
 1fc:	8d 83       	std	Y+5, r24	; 0x05
 1fe:	9e 83       	std	Y+6, r25	; 0x06
 200:	af 83       	std	Y+7, r26	; 0x07
 202:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	4a e7       	ldi	r20, 0x7A	; 122
 20a:	55 e4       	ldi	r21, 0x45	; 69
 20c:	6d 81       	ldd	r22, Y+5	; 0x05
 20e:	7e 81       	ldd	r23, Y+6	; 0x06
 210:	8f 81       	ldd	r24, Y+7	; 0x07
 212:	98 85       	ldd	r25, Y+8	; 0x08
 214:	0e 94 91 02 	call	0x522	; 0x522 <__mulsf3>
 218:	dc 01       	movw	r26, r24
 21a:	cb 01       	movw	r24, r22
 21c:	89 87       	std	Y+9, r24	; 0x09
 21e:	9a 87       	std	Y+10, r25	; 0x0a
 220:	ab 87       	std	Y+11, r26	; 0x0b
 222:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e8       	ldi	r20, 0x80	; 128
 22a:	5f e3       	ldi	r21, 0x3F	; 63
 22c:	69 85       	ldd	r22, Y+9	; 0x09
 22e:	7a 85       	ldd	r23, Y+10	; 0x0a
 230:	8b 85       	ldd	r24, Y+11	; 0x0b
 232:	9c 85       	ldd	r25, Y+12	; 0x0c
 234:	0e 94 ce 01 	call	0x39c	; 0x39c <__cmpsf2>
 238:	88 23       	and	r24, r24
 23a:	2c f4       	brge	.+10     	; 0x246 <_prnt+0x1c6>
		__ticks = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	9e 87       	std	Y+14, r25	; 0x0e
 242:	8d 87       	std	Y+13, r24	; 0x0d
 244:	3f c0       	rjmp	.+126    	; 0x2c4 <_prnt+0x244>
	else if (__tmp > 65535)
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	3f ef       	ldi	r19, 0xFF	; 255
 24a:	4f e7       	ldi	r20, 0x7F	; 127
 24c:	57 e4       	ldi	r21, 0x47	; 71
 24e:	69 85       	ldd	r22, Y+9	; 0x09
 250:	7a 85       	ldd	r23, Y+10	; 0x0a
 252:	8b 85       	ldd	r24, Y+11	; 0x0b
 254:	9c 85       	ldd	r25, Y+12	; 0x0c
 256:	0e 94 8c 02 	call	0x518	; 0x518 <__gesf2>
 25a:	18 16       	cp	r1, r24
 25c:	4c f5       	brge	.+82     	; 0x2b0 <_prnt+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e2       	ldi	r20, 0x20	; 32
 264:	51 e4       	ldi	r21, 0x41	; 65
 266:	6d 81       	ldd	r22, Y+5	; 0x05
 268:	7e 81       	ldd	r23, Y+6	; 0x06
 26a:	8f 81       	ldd	r24, Y+7	; 0x07
 26c:	98 85       	ldd	r25, Y+8	; 0x08
 26e:	0e 94 91 02 	call	0x522	; 0x522 <__mulsf3>
 272:	dc 01       	movw	r26, r24
 274:	cb 01       	movw	r24, r22
 276:	bc 01       	movw	r22, r24
 278:	cd 01       	movw	r24, r26
 27a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 27e:	dc 01       	movw	r26, r24
 280:	cb 01       	movw	r24, r22
 282:	9e 87       	std	Y+14, r25	; 0x0e
 284:	8d 87       	std	Y+13, r24	; 0x0d
 286:	0f c0       	rjmp	.+30     	; 0x2a6 <_prnt+0x226>
 288:	80 e9       	ldi	r24, 0x90	; 144
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	98 8b       	std	Y+16, r25	; 0x10
 28e:	8f 87       	std	Y+15, r24	; 0x0f
 290:	8f 85       	ldd	r24, Y+15	; 0x0f
 292:	98 89       	ldd	r25, Y+16	; 0x10
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <_prnt+0x214>
 298:	98 8b       	std	Y+16, r25	; 0x10
 29a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	8d 85       	ldd	r24, Y+13	; 0x0d
 29e:	9e 85       	ldd	r25, Y+14	; 0x0e
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	9e 87       	std	Y+14, r25	; 0x0e
 2a4:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a6:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a8:	9e 85       	ldd	r25, Y+14	; 0x0e
 2aa:	89 2b       	or	r24, r25
 2ac:	69 f7       	brne	.-38     	; 0x288 <_prnt+0x208>
}
 2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <_prnt+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b0:	69 85       	ldd	r22, Y+9	; 0x09
 2b2:	7a 85       	ldd	r23, Y+10	; 0x0a
 2b4:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b6:	9c 85       	ldd	r25, Y+12	; 0x0c
 2b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	9e 87       	std	Y+14, r25	; 0x0e
 2c2:	8d 87       	std	Y+13, r24	; 0x0d
 2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c8:	9a 8b       	std	Y+18, r25	; 0x12
 2ca:	89 8b       	std	Y+17, r24	; 0x11
 2cc:	89 89       	ldd	r24, Y+17	; 0x11
 2ce:	9a 89       	ldd	r25, Y+18	; 0x12
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <_prnt+0x250>
 2d4:	9a 8b       	std	Y+18, r25	; 0x12
 2d6:	89 8b       	std	Y+17, r24	; 0x11
 2d8:	00 00       	nop
 2da:	a1 96       	adiw	r28, 0x21	; 33
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <main>:

int main(void){
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	1f 92       	push	r1
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
  DDRB |= (1<<LedBoard)|(1<<LedPWM)|(1<<LedRgbB)|(1<<LedRgbG)|(1<<LedRgbR);     // конфигурируем пин как выход
 2f6:	84 e2       	ldi	r24, 0x24	; 36
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	24 e2       	ldi	r18, 0x24	; 36
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	2f 62       	ori	r18, 0x2F	; 47
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
  DDRC |= (1<<Led0)|(1<<Led1)|(1<<Led2);
 308:	87 e2       	ldi	r24, 0x27	; 39
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	27 e2       	ldi	r18, 0x27	; 39
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	27 60       	ori	r18, 0x07	; 7
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18

  while (1) {
   // Test PWM
   for (uint8_t i=0;i<10;i++){
 31a:	19 82       	std	Y+1, r1	; 0x01
 31c:	0a c0       	rjmp	.+20     	; 0x332 <main+0x46>
     prnt(PORTB,LedPWM,30);
 31e:	4e e1       	ldi	r20, 0x1E	; 30
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	85 e2       	ldi	r24, 0x25	; 37
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
  DDRB |= (1<<LedBoard)|(1<<LedPWM)|(1<<LedRgbB)|(1<<LedRgbG)|(1<<LedRgbR);     // конфигурируем пин как выход
  DDRC |= (1<<Led0)|(1<<Led1)|(1<<Led2);

  while (1) {
   // Test PWM
   for (uint8_t i=0;i<10;i++){
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	89 83       	std	Y+1, r24	; 0x01
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	98 f3       	brcs	.-26     	; 0x31e <main+0x32>
     prnt(PORTB,LedPWM,30);
   }
   // Test Led0-2 green
   prnt(PORTC,Led0,200);
 338:	48 ec       	ldi	r20, 0xC8	; 200
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	88 e2       	ldi	r24, 0x28	; 40
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
   prnt(PORTC,Led1,200);
 346:	48 ec       	ldi	r20, 0xC8	; 200
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	88 e2       	ldi	r24, 0x28	; 40
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
   prnt(PORTC,Led2,200);
 354:	48 ec       	ldi	r20, 0xC8	; 200
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	88 e2       	ldi	r24, 0x28	; 40
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
   // Mini Test Rgb
   prnt(PORTB,LedRgbR,300);
 362:	4c e2       	ldi	r20, 0x2C	; 44
 364:	51 e0       	ldi	r21, 0x01	; 1
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	85 e2       	ldi	r24, 0x25	; 37
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
   prnt(PORTB,LedRgbG,300);
 370:	4c e2       	ldi	r20, 0x2C	; 44
 372:	51 e0       	ldi	r21, 0x01	; 1
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	85 e2       	ldi	r24, 0x25	; 37
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
   prnt(PORTB,LedRgbB,300);
 37e:	4c e2       	ldi	r20, 0x2C	; 44
 380:	51 e0       	ldi	r21, 0x01	; 1
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	85 e2       	ldi	r24, 0x25	; 37
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
   // LedBoard
   prnt(PORTB,LedBoard,500);
 38c:	44 ef       	ldi	r20, 0xF4	; 244
 38e:	51 e0       	ldi	r21, 0x01	; 1
 390:	65 e0       	ldi	r22, 0x05	; 5
 392:	85 e2       	ldi	r24, 0x25	; 37
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 40 00 	call	0x80	; 0x80 <_prnt>
  }
 39a:	bf cf       	rjmp	.-130    	; 0x31a <main+0x2e>

0000039c <__cmpsf2>:
 39c:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_cmp>
 3a0:	08 f4       	brcc	.+2      	; 0x3a4 <__cmpsf2+0x8>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret

000003a6 <__fixunssfsi>:
 3a6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_splitA>
 3aa:	88 f0       	brcs	.+34     	; 0x3ce <__fixunssfsi+0x28>
 3ac:	9f 57       	subi	r25, 0x7F	; 127
 3ae:	98 f0       	brcs	.+38     	; 0x3d6 <__fixunssfsi+0x30>
 3b0:	b9 2f       	mov	r27, r25
 3b2:	99 27       	eor	r25, r25
 3b4:	b7 51       	subi	r27, 0x17	; 23
 3b6:	b0 f0       	brcs	.+44     	; 0x3e4 <__fixunssfsi+0x3e>
 3b8:	e1 f0       	breq	.+56     	; 0x3f2 <__fixunssfsi+0x4c>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	1a f0       	brmi	.+6      	; 0x3ca <__fixunssfsi+0x24>
 3c4:	ba 95       	dec	r27
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__fixunssfsi+0x14>
 3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <__fixunssfsi+0x4c>
 3ca:	b1 30       	cpi	r27, 0x01	; 1
 3cc:	91 f0       	breq	.+36     	; 0x3f2 <__fixunssfsi+0x4c>
 3ce:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_zero>
 3d2:	b1 e0       	ldi	r27, 0x01	; 1
 3d4:	08 95       	ret
 3d6:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_zero>
 3da:	67 2f       	mov	r22, r23
 3dc:	78 2f       	mov	r23, r24
 3de:	88 27       	eor	r24, r24
 3e0:	b8 5f       	subi	r27, 0xF8	; 248
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <__fixunssfsi+0x4c>
 3e4:	b9 3f       	cpi	r27, 0xF9	; 249
 3e6:	cc f3       	brlt	.-14     	; 0x3da <__fixunssfsi+0x34>
 3e8:	86 95       	lsr	r24
 3ea:	77 95       	ror	r23
 3ec:	67 95       	ror	r22
 3ee:	b3 95       	inc	r27
 3f0:	d9 f7       	brne	.-10     	; 0x3e8 <__fixunssfsi+0x42>
 3f2:	3e f4       	brtc	.+14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f4:	90 95       	com	r25
 3f6:	80 95       	com	r24
 3f8:	70 95       	com	r23
 3fa:	61 95       	neg	r22
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	8f 4f       	sbci	r24, 0xFF	; 255
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	08 95       	ret

00000404 <__floatunsisf>:
 404:	e8 94       	clt
 406:	09 c0       	rjmp	.+18     	; 0x41a <__floatsisf+0x12>

00000408 <__floatsisf>:
 408:	97 fb       	bst	r25, 7
 40a:	3e f4       	brtc	.+14     	; 0x41a <__floatsisf+0x12>
 40c:	90 95       	com	r25
 40e:	80 95       	com	r24
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	8f 4f       	sbci	r24, 0xFF	; 255
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	99 23       	and	r25, r25
 41c:	a9 f0       	breq	.+42     	; 0x448 <__floatsisf+0x40>
 41e:	f9 2f       	mov	r31, r25
 420:	96 e9       	ldi	r25, 0x96	; 150
 422:	bb 27       	eor	r27, r27
 424:	93 95       	inc	r25
 426:	f6 95       	lsr	r31
 428:	87 95       	ror	r24
 42a:	77 95       	ror	r23
 42c:	67 95       	ror	r22
 42e:	b7 95       	ror	r27
 430:	f1 11       	cpse	r31, r1
 432:	f8 cf       	rjmp	.-16     	; 0x424 <__floatsisf+0x1c>
 434:	fa f4       	brpl	.+62     	; 0x474 <__floatsisf+0x6c>
 436:	bb 0f       	add	r27, r27
 438:	11 f4       	brne	.+4      	; 0x43e <__floatsisf+0x36>
 43a:	60 ff       	sbrs	r22, 0
 43c:	1b c0       	rjmp	.+54     	; 0x474 <__floatsisf+0x6c>
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	8f 4f       	sbci	r24, 0xFF	; 255
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	16 c0       	rjmp	.+44     	; 0x474 <__floatsisf+0x6c>
 448:	88 23       	and	r24, r24
 44a:	11 f0       	breq	.+4      	; 0x450 <__floatsisf+0x48>
 44c:	96 e9       	ldi	r25, 0x96	; 150
 44e:	11 c0       	rjmp	.+34     	; 0x472 <__floatsisf+0x6a>
 450:	77 23       	and	r23, r23
 452:	21 f0       	breq	.+8      	; 0x45c <__floatsisf+0x54>
 454:	9e e8       	ldi	r25, 0x8E	; 142
 456:	87 2f       	mov	r24, r23
 458:	76 2f       	mov	r23, r22
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__floatsisf+0x5e>
 45c:	66 23       	and	r22, r22
 45e:	71 f0       	breq	.+28     	; 0x47c <__floatsisf+0x74>
 460:	96 e8       	ldi	r25, 0x86	; 134
 462:	86 2f       	mov	r24, r22
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	2a f0       	brmi	.+10     	; 0x474 <__floatsisf+0x6c>
 46a:	9a 95       	dec	r25
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	da f7       	brpl	.-10     	; 0x46a <__floatsisf+0x62>
 474:	88 0f       	add	r24, r24
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret

0000047e <__fp_cmp>:
 47e:	99 0f       	add	r25, r25
 480:	00 08       	sbc	r0, r0
 482:	55 0f       	add	r21, r21
 484:	aa 0b       	sbc	r26, r26
 486:	e0 e8       	ldi	r30, 0x80	; 128
 488:	fe ef       	ldi	r31, 0xFE	; 254
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	e8 07       	cpc	r30, r24
 490:	f9 07       	cpc	r31, r25
 492:	c0 f0       	brcs	.+48     	; 0x4c4 <__fp_cmp+0x46>
 494:	12 16       	cp	r1, r18
 496:	13 06       	cpc	r1, r19
 498:	e4 07       	cpc	r30, r20
 49a:	f5 07       	cpc	r31, r21
 49c:	98 f0       	brcs	.+38     	; 0x4c4 <__fp_cmp+0x46>
 49e:	62 1b       	sub	r22, r18
 4a0:	73 0b       	sbc	r23, r19
 4a2:	84 0b       	sbc	r24, r20
 4a4:	95 0b       	sbc	r25, r21
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <__fp_cmp+0x38>
 4a8:	0a 26       	eor	r0, r26
 4aa:	61 f0       	breq	.+24     	; 0x4c4 <__fp_cmp+0x46>
 4ac:	23 2b       	or	r18, r19
 4ae:	24 2b       	or	r18, r20
 4b0:	25 2b       	or	r18, r21
 4b2:	21 f4       	brne	.+8      	; 0x4bc <__fp_cmp+0x3e>
 4b4:	08 95       	ret
 4b6:	0a 26       	eor	r0, r26
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__fp_cmp+0x3e>
 4ba:	a1 40       	sbci	r26, 0x01	; 1
 4bc:	a6 95       	lsr	r26
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	81 1d       	adc	r24, r1
 4c2:	81 1d       	adc	r24, r1
 4c4:	08 95       	ret

000004c6 <__fp_split3>:
 4c6:	57 fd       	sbrc	r21, 7
 4c8:	90 58       	subi	r25, 0x80	; 128
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	59 f0       	breq	.+22     	; 0x4e6 <__fp_splitA+0x10>
 4d0:	5f 3f       	cpi	r21, 0xFF	; 255
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <__fp_splitA+0x1a>
 4d4:	47 95       	ror	r20

000004d6 <__fp_splitA>:
 4d6:	88 0f       	add	r24, r24
 4d8:	97 fb       	bst	r25, 7
 4da:	99 1f       	adc	r25, r25
 4dc:	61 f0       	breq	.+24     	; 0x4f6 <__fp_splitA+0x20>
 4de:	9f 3f       	cpi	r25, 0xFF	; 255
 4e0:	79 f0       	breq	.+30     	; 0x500 <__fp_splitA+0x2a>
 4e2:	87 95       	ror	r24
 4e4:	08 95       	ret
 4e6:	12 16       	cp	r1, r18
 4e8:	13 06       	cpc	r1, r19
 4ea:	14 06       	cpc	r1, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	f2 cf       	rjmp	.-28     	; 0x4d4 <__fp_split3+0xe>
 4f0:	46 95       	lsr	r20
 4f2:	f1 df       	rcall	.-30     	; 0x4d6 <__fp_splitA>
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <__fp_splitA+0x30>
 4f6:	16 16       	cp	r1, r22
 4f8:	17 06       	cpc	r1, r23
 4fa:	18 06       	cpc	r1, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	f1 cf       	rjmp	.-30     	; 0x4e2 <__fp_splitA+0xc>
 500:	86 95       	lsr	r24
 502:	71 05       	cpc	r23, r1
 504:	61 05       	cpc	r22, r1
 506:	08 94       	sec
 508:	08 95       	ret

0000050a <__fp_zero>:
 50a:	e8 94       	clt

0000050c <__fp_szero>:
 50c:	bb 27       	eor	r27, r27
 50e:	66 27       	eor	r22, r22
 510:	77 27       	eor	r23, r23
 512:	cb 01       	movw	r24, r22
 514:	97 f9       	bld	r25, 7
 516:	08 95       	ret

00000518 <__gesf2>:
 518:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_cmp>
 51c:	08 f4       	brcc	.+2      	; 0x520 <__gesf2+0x8>
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	08 95       	ret

00000522 <__mulsf3>:
 522:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3x>
 526:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_round>
 52a:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_pscA>
 52e:	38 f0       	brcs	.+14     	; 0x53e <__mulsf3+0x1c>
 530:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscB>
 534:	20 f0       	brcs	.+8      	; 0x53e <__mulsf3+0x1c>
 536:	95 23       	and	r25, r21
 538:	11 f0       	breq	.+4      	; 0x53e <__mulsf3+0x1c>
 53a:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__fp_inf>
 53e:	0c 94 04 03 	jmp	0x608	; 0x608 <__fp_nan>
 542:	11 24       	eor	r1, r1
 544:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_szero>

00000548 <__mulsf3x>:
 548:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_split3>
 54c:	70 f3       	brcs	.-36     	; 0x52a <__mulsf3+0x8>

0000054e <__mulsf3_pse>:
 54e:	95 9f       	mul	r25, r21
 550:	c1 f3       	breq	.-16     	; 0x542 <__mulsf3+0x20>
 552:	95 0f       	add	r25, r21
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	55 1f       	adc	r21, r21
 558:	62 9f       	mul	r22, r18
 55a:	f0 01       	movw	r30, r0
 55c:	72 9f       	mul	r23, r18
 55e:	bb 27       	eor	r27, r27
 560:	f0 0d       	add	r31, r0
 562:	b1 1d       	adc	r27, r1
 564:	63 9f       	mul	r22, r19
 566:	aa 27       	eor	r26, r26
 568:	f0 0d       	add	r31, r0
 56a:	b1 1d       	adc	r27, r1
 56c:	aa 1f       	adc	r26, r26
 56e:	64 9f       	mul	r22, r20
 570:	66 27       	eor	r22, r22
 572:	b0 0d       	add	r27, r0
 574:	a1 1d       	adc	r26, r1
 576:	66 1f       	adc	r22, r22
 578:	82 9f       	mul	r24, r18
 57a:	22 27       	eor	r18, r18
 57c:	b0 0d       	add	r27, r0
 57e:	a1 1d       	adc	r26, r1
 580:	62 1f       	adc	r22, r18
 582:	73 9f       	mul	r23, r19
 584:	b0 0d       	add	r27, r0
 586:	a1 1d       	adc	r26, r1
 588:	62 1f       	adc	r22, r18
 58a:	83 9f       	mul	r24, r19
 58c:	a0 0d       	add	r26, r0
 58e:	61 1d       	adc	r22, r1
 590:	22 1f       	adc	r18, r18
 592:	74 9f       	mul	r23, r20
 594:	33 27       	eor	r19, r19
 596:	a0 0d       	add	r26, r0
 598:	61 1d       	adc	r22, r1
 59a:	23 1f       	adc	r18, r19
 59c:	84 9f       	mul	r24, r20
 59e:	60 0d       	add	r22, r0
 5a0:	21 1d       	adc	r18, r1
 5a2:	82 2f       	mov	r24, r18
 5a4:	76 2f       	mov	r23, r22
 5a6:	6a 2f       	mov	r22, r26
 5a8:	11 24       	eor	r1, r1
 5aa:	9f 57       	subi	r25, 0x7F	; 127
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	9a f0       	brmi	.+38     	; 0x5d6 <__mulsf3_pse+0x88>
 5b0:	f1 f0       	breq	.+60     	; 0x5ee <__mulsf3_pse+0xa0>
 5b2:	88 23       	and	r24, r24
 5b4:	4a f0       	brmi	.+18     	; 0x5c8 <__mulsf3_pse+0x7a>
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	bb 1f       	adc	r27, r27
 5bc:	66 1f       	adc	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	91 50       	subi	r25, 0x01	; 1
 5c4:	50 40       	sbci	r21, 0x00	; 0
 5c6:	a9 f7       	brne	.-22     	; 0x5b2 <__mulsf3_pse+0x64>
 5c8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ca:	51 05       	cpc	r21, r1
 5cc:	80 f0       	brcs	.+32     	; 0x5ee <__mulsf3_pse+0xa0>
 5ce:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__fp_inf>
 5d2:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_szero>
 5d6:	5f 3f       	cpi	r21, 0xFF	; 255
 5d8:	e4 f3       	brlt	.-8      	; 0x5d2 <__mulsf3_pse+0x84>
 5da:	98 3e       	cpi	r25, 0xE8	; 232
 5dc:	d4 f3       	brlt	.-12     	; 0x5d2 <__mulsf3_pse+0x84>
 5de:	86 95       	lsr	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f7 95       	ror	r31
 5e8:	e7 95       	ror	r30
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	c1 f7       	brne	.-16     	; 0x5de <__mulsf3_pse+0x90>
 5ee:	fe 2b       	or	r31, r30
 5f0:	88 0f       	add	r24, r24
 5f2:	91 1d       	adc	r25, r1
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__fp_inf>:
 5fc:	97 f9       	bld	r25, 7
 5fe:	9f 67       	ori	r25, 0x7F	; 127
 600:	80 e8       	ldi	r24, 0x80	; 128
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	08 95       	ret

00000608 <__fp_nan>:
 608:	9f ef       	ldi	r25, 0xFF	; 255
 60a:	80 ec       	ldi	r24, 0xC0	; 192
 60c:	08 95       	ret

0000060e <__fp_pscA>:
 60e:	00 24       	eor	r0, r0
 610:	0a 94       	dec	r0
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	09 06       	cpc	r0, r25
 61a:	08 95       	ret

0000061c <__fp_pscB>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	12 16       	cp	r1, r18
 622:	13 06       	cpc	r1, r19
 624:	14 06       	cpc	r1, r20
 626:	05 06       	cpc	r0, r21
 628:	08 95       	ret

0000062a <__fp_round>:
 62a:	09 2e       	mov	r0, r25
 62c:	03 94       	inc	r0
 62e:	00 0c       	add	r0, r0
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_round+0xc>
 632:	88 23       	and	r24, r24
 634:	52 f0       	brmi	.+20     	; 0x64a <__fp_round+0x20>
 636:	bb 0f       	add	r27, r27
 638:	40 f4       	brcc	.+16     	; 0x64a <__fp_round+0x20>
 63a:	bf 2b       	or	r27, r31
 63c:	11 f4       	brne	.+4      	; 0x642 <__fp_round+0x18>
 63e:	60 ff       	sbrs	r22, 0
 640:	04 c0       	rjmp	.+8      	; 0x64a <__fp_round+0x20>
 642:	6f 5f       	subi	r22, 0xFF	; 255
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
